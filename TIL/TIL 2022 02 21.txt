자바에서 = 는 오른쪽을 왼쪽으로 넣어준다는 의미
우리가 아는 = 는 자바에서는 ==, ===로 됨
let 안녕 = "하세요";

위 설명 let은 ~해라 "안녕"이라는 공간에 "하세요"를 저장하라는 의미

식별자 : 스크립트에 변수나 함수에 이름을 붙일때 씀 위에 안녕이 식별자
키워드는 사용불가, 숫자로 시작X, 특수문자는 _ 랑 $ 만, 공백은 사용X
자바 주석은 //, /* */ 두개 씀. //는 1줄 /**/는 2줄 이상

변수
변경 가능 한 값. 사용하기 전엔 선언 필요. 중복선언 X let으로 선언
ex.) let A = 123; let은 키워드 A는 변수명, 식별자 값은 123
A =456; 으로 작성하면 변수라 값을 변경시켜서 넣음

상수
변경 불가능한 값 저장 공간. 나머진 변수랑 같음. const로 선언
보통 대문자로 씀

호이스팅
코드에 선언된 변수 함수를 코드 상단으로 끌어올림 var라는 키워드를 쓸 때만 씀.

자료형 (목적이나 성징레 따라 범주를 갖고있는 데이터의 종류)
typeof 자료형을 반환하는 연산자
tyepof x와 함수인 tyepof(x)로 지원

원시타입과 객체타입으로 나눔
원시타입
Boolean 논리적으로 T,F 조건문등 동작 판단의 기준으로 사용
null 존재하지 않거나 유효하지 않는 주소 값이 비어있다는 의미로 표현됨
undefiend 선언 후 값을 할당하지 않는 변수
number 정수, 실수등
string "", '', ``등 문자열 표현함 ``는 안에 함수픞 사용할 수 있음.
symbol 문자열과 객체 property로 사용
객체타입
object 두개 이상 복잡한 개체 저장
다수의 원시 자료형을 포함하거나 복잡한 개체를 표현 할 때만
object는 (){}생성 value로 표현하고 접근은 object.key > user.name
ex.) let user = { name = "john", age = 28, }; 유저 안에는 이름이라는 자료형과
나이라는 자료형이 저장되는 것이 아닌 저 2개의 자료형이 저장된 메모리 주소가 저장되는 것이다.

얕은 복사
user와 admin이 있으면 admin은 원래 user의 주소만 가르켰는데 얕은 복사를 사용하게 되면
새로운 전개 연산자를 통해 새로운 공간을 만들어 새로 생성하는 것. (객체 내 객체가 있으면 사용X)

얕은 복사 .1(for문을 통한 객체 복사)
/*for 문을 이용한 방법
let admin = {};

for (let key in user) {
  admin[key] = user[key];
}*/

얕은 복사 .2
// Object를 통한 방법
// let admin = Object.assign({}, user);

얕은 복사 .3
let admin = { ...user}; //{user.name, user.age}

깊은 복사
재귀 함수를 이용한 깊은 복사 json객체를 이용한 깊은 복사

깊은 복사 .1(for문을 이용한 복잡한 객체 복사)
깊은 복사 .2
let adimn_json = JSON.parse(JSON.stringify(user));
json는 object > string으로 리턴 됨. parse라는 걸 통해 string > object로 다시 변환.

string Boolean number로 타입을 변화 시킬 수 있음.
parseInt : 소수점 이상만
ParseFloat : 소수점 이하까지

연산자
연산의 대상 값은 피연산자, 피연산자 개수에 따라 단항, 이항, 삼항 등으로 말함.

산술 연산자 : 수학적 계산 +-/* % **
% > 나누고 나머지를 구함 ** > 거듭 제곱

대입 연산자 : = 오른쪽값을 왼쪽저장소에 저장

복합 대입 연산자 : +=, -=, *=, /= 등 위에 산술연산자 똑같이.
증감 연산자 ++피연산자, 피연산자++ --피연산자, 피연산자-- 증감연산자가 바로 대입되려면 앞에 아니면 뒤에

비교 연산자
좌항과 우항의 피연산자를 비교한 다음 결과값을 논리적 자료형으로 변환
동등비교 == 단순값 같음 (데이터가 달라도 알아서 형변환) 부정일땐 != 값이 다르면 T 아님 F
일치비교 === 자료형까지 같음. (데이터가 다르면 다르다.) 위랑 같음.

논리 연산자
좌항과 우항의 피연산자 간 논리값을 연산하여 참 거짓으로 결과를 얻는 것.
&&(and), ||(or), !(not)

Scope
변수 혹은 상수에 접근할 수 있는 범위 (코드간에 구역을 나눈다는 의미) 중괄호{}로 나누거나 함수로
Global scope : 전역에 설정
Local scope : 구역에만 설정 로컬에 있는값먼저 쓰고 로컬에 값이없으면 글로벌에 출력

조건문

if-else
알고리즘 논리적 비교를 할 때 사용되는 조건식 조건식이 맞으면 {}내 명령문 수행
T면 if{} 수행 F면 else{} 수행 else if는 if가 아날때 일단 실행해보고 안되면 else로 보냄

3항연산자
if else를 대체해서 사용가능
식 : 변수 = (조건식) ? 참일 때 값 : 거짓일 때 값
ex : msg_another = age < 19 > "very old" : " very young"

조건문 switch
포현식을 평가하여 값이 일치하는 case문을 실행하는 조건문
switch, case, break, default로 구성
case는 각각 조건 break는 조건 한번 하고나서 멈춰야함 무적권