배열의 요소 혹은 객체의 속성에 함수를 정의하여 저장 가능

객체에 저장된 값이 func 경우 이를 메서드라고 부름

객체에는 함수를 담고있는 주소만 유저가 갖고 있다.
함수라는 요소를 갖고있는것도 함수를 갖고있는게 아닌 주소를 갖음.
this = 메서드에서 객체 내부 속성값을 접근 할 수 있음.

지수 / 진법

지수 표기법 (아주 큰 숫자나 아주 작은 숫자를 표기위한 표기법 e로 0을 대체)

진법 표기 0x0f 16진수 0o17 8진수 0b1111 2진수

지수로 표기되는 양수 최대최소값 Number.max min value
안전하게 표기되는 양수 최대최소값 Number.max min safe integer
무한대 양수/음수 Number.positive infinity, negative infinity
부동 소수점 산술 정의되지 않거나 표현안되는거 Number.NaN

대표 메서드
형변환
console.log(typeof toString());
console.log(typeof String(us));
console.log(typeof (us + ""));
자리수 표현
let num_1 = 125.0;
let num_2 = 123.456

console.log(num_1 - num_2);
console.log((num_1 - num_2).toFixed(3)); 소수 이하 자리수제한
console.log((num_1 - num_2).toPrecision(3)); 소수 정수포함 자리수 제한

넘버 자료형 확인
console.log(Number.isNaN(0.123));      숫자가 아닌가? f
console.log(!Number.isNaN(0.123));     !는 반대로 물어봄 숫자인가? T
console.log(Number.isNaN(123 / "hello"));     숫자를 문자로 나눳기 떄문에 T
console.log(Number.isFinite(Infinity));     유한수인가? 무한대라 F
console.log(Number.isFinite("hello"));      유한수인가? 글자라 F
console.log(Number.isFinite(-123));         유한수인가? 숫자라 T

정수랑 실수로 변환
정수로 변환
console.log(Number.parseInt("123px"));
console.log(parseInt("123px"));
실수로 변환
console.log(Number.parseFloat("1.25em"));
console.log(parseFloat("1.25em"));

문자열 길이 : String.length
문자열 접근 : String.charAt(index) = Str[], String.charCodeAt(index)
문자열 검색 : String.indexOf(), String.lastlndexOf() index값으로 받는다.
             let text = "hello, world!!";
              console.log(text.indexOf("l"));
              console.log(text.indexOf("l", 3));
              console.log(text.indexOf("l", 4));
             String.includes(), String.startWith(), String.endWith()
             console.log(text.includes("hello")); T
             console.log(text.startsWith("ello")); F (앞에 H가 빠져서 인식 X)
문자열 변환 : String.toUpperCase() 대문자로, String.toLowerCase() 소문자로
문자열 치환 : String.replace()
              console.log(text.replace("!", "?")); 앞에 하나만 ?
              console.log(text.replace("l", "i")); 앞에 하나만 i
              console.log(text.replace(/l/g, "i")); 모든 l을 소문자만 i로
              console.log(text.replace(/l/gi, "i")); 모든 l을 대소문자 구분X i로
문자열 추출 : String.slice(start,end), String.substring(start,end) >> 시작부터 끝까지 지정 substring은 스타트가 더 커도 알아서 엔드가 작은수면 앞으로 내보냄
             String.substr(start,length)     >>  시작부터 길이 지정.
문자열 분할 : String.split() (여기에 조건을 넣는다 ex.) " " 면 띄어쓰기 기준으로 나눔 ""면 하나씩 다 쪼개기 , 이후에 숫자는 갯수만큼 추출)
\r, \n 은 엔터키랑 같다. \\는 \표시 \t는 탭 \u{}는 유니코드